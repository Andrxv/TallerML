{
    "collab_server" : "",
    "contents" : "packages <- c('shiny', 'shinyjs', 'RJSONIO', 'RCurl', 'warbleR', 'tuneR', 'seewave', 'gbm')\nif (length(setdiff(packages, rownames(installed.packages()))) > 0) {\ninstall.packages(setdiff(packages, rownames(installed.packages())))  \n}\n\nlibrary(shiny)\nlibrary(shinyjs)\nlibrary(RJSONIO)\nlibrary(RCurl)\nlibrary(warbleR)\nlibrary(parallel)\n\nsource('config.R')\nsource('gender.R')\n\n# REST service endpoint.\nhttpHandler = function(req) {\n  if (req$REQUEST_METHOD == \"GET\") {\n    # handle GET requests\n    print(req$QUERY_STRING)\n    query <- parseQueryString(req$QUERY_STRING)\n    # name <- query$name\n  }\n  else if (req$REQUEST_METHOD == \"POST\") {\n    # handle POST requests here\n    reqInput <- req$rook.input\n    print(reqInput)\n    \n    # read a chuck of size 2^16 bytes, should suffice for our test\n    #buf <- reqInput$read(2^16)\n    \n    # simply dump the HTTP request (input) stream back to client\n    #shiny:::httpResponse(\n    #  200, 'text/plain', buf\n    #)\n  }  \n  \n  message = list(value = \"hello\")\n  \n  return(list(status = 200L,\n              headers = list('Content-Type' = 'application/json'),\n              body = toJSON(message)))\n}\n\nshiny:::handlerManager$addHandler(shiny:::routeHandler(\"/json\", httpHandler) , \"gendervoice\")\n\noptions(shiny.maxRequestSize=2*1024^2)\n\nshinyServer(function(input, output, session) {\n  v <- reactiveValues(data = NULL)\n  \n  observeEvent(input$file1, {\n    # input$file1 will be NULL initially. After the user selects\n    # and uploads a file, it will be a data frame with 'name',\n    # 'size', 'type', and 'datapath' columns. The 'datapath'\n    # column will contain the local filenames where the data can\n    # be found.\n    content <- ''\n    inFile <- input$file1\n\n    if (grepl('.wav', tolower(inFile$name)) != TRUE) {\n      content <- '<div class=\"shiny-output-error-validation\">Please select a .WAV file to upload.</div>'\n    }\n    else if (!is.null(inFile)) {\n      disable('btnUrl')\n      disable('url')\n      disable('file1')\n      \n      withProgress(message='Please wait ..', style='old', value=0, {\n        result <- processFile(inFile, input$model)\n        \n        content <- result$content\n        if (!is.null(result$graph1)) {\n          output$graph1 <- result$graph1\n          output$graph2 <- result$graph2\n        }\n      })\n    }\n    \n    enable('btnUrl')\n    enable('url')\n    enable('file1')\n    \n    v$data <- content\n  })\n  \n  observeEvent(input$btnUrl, {\n    content <- ''\n    url <- input$url\n    \n    disable('btnUrl')\n    disable('url')\n    disable('file1')\n\n    if (url != '' && grepl('http', tolower(url)) && (grepl('vocaroo.com', url) || grepl('clyp.it', url))) {\n      withProgress(message='Please wait ..', style='old', value=0, {\n        result <- processUrl(url, input$model)\n        \n        content <- result$content\n        if (!is.null(result$graph1)) {\n          output$graph1 <- result$graph1\n          output$graph2 <- result$graph2\n        }\n      })\n    }\n    else {\n      content <- '<div class=\"shiny-output-error-validation\">Please enter a url to vocaroo or clyp.it.</div>'\n    }\n    \n    enable('btnUrl')\n    enable('url')\n    enable('file1')\n    \n    v$data <- content\n  })\n  \n  output$content <- eventReactive(v$data, {\n    HTML(v$data)\n  })\n})\n\nprocessFile <- function(inFile, model) {\n  # Create a unique filename.\n  id <- sample(1:100000, 1)\n  filePath <- paste0('./temp', sample(1:100000, 1), '/temp', id, '.wav')\n  \n  logEntry('File uploaded.', paste0('\"id\": \"', id, '\", \"inFile\": \"', inFile$datapath, '\", \"filePath\": \"', filePath, '\"'))\n  \n  currentPath <- getwd()\n  fileName <- basename(filePath)\n  path <- dirname(filePath)\n  \n  # Create directory.\n  dir.create(path)\n  \n  incProgress(0.1, message = 'Uploading clip ..')\n  \n  # Copy the temp file to our local folder.\n  file.copy(inFile$datapath, filePath)\n\n  logEntry('File copied.', paste0('\"id\": \"', id, '\", inFile\": \"', inFile$datapath, '\", \"filePath\": \"', filePath, '\"'))\n  \n  # Process.\n  result <- process(filePath)\n\n  unlink(path, recursive = T)\n  \n  logEntry('Classification done.', paste0('\"id\": \"', id, '\", \"filePath\": \"', path, '\", \"class\": \"', result$content5$label, '\", \"prob\": \"', round(result$content5$prob * 100), '\"'))\n  \n  list(content=formatResult(result), graph1=result$graph1, graph2=result$graph2)\n}\n\nprocessUrl <- function(url, model) {\n  origUrl <- url\n  \n  # Create a unique id for the file.\n  id <- sample(1:100000, 1)\n  \n  if (grepl('vocaroo', tolower(url))) {\n    # Create a unique filename.\n    fileName <- paste0('temp', id, '.wav')\n    \n    # Get apiId from url.\n    apiId <- gsub('.+/i/(\\\\w+)', '\\\\1', url)\n    url <- paste0('http://vocaroo.com/media_command.php?media=', apiId, '&command=download_wav')\n    print(paste('Downloading', url, sep=' '))\n    \n    incProgress(0.1, message = 'Downloading clip ..')\n    \n    logEntry('Downloading url.', paste0('\"id\": \"', id, '\", \"url\": \"', origUrl, '\", \"downloadUrl\": \"', url, '\", \"fileName\": \"', fileName, '\"'))\n    \n    # Download wav file.\n    download.file(url, fileName)\n    \n    # Process.        \n    result <- process(fileName)\n    graph1 <- result$graph1\n    graph2 <- result$graph2\n    \n    logEntry('Classification done.', paste0('\"id\": \"', id, '\", \"url\": \"', origUrl, '\", \"filePath\": \"', fileName, '\", \"class\": \"', result$content5$label, '\", \"prob\": \"', round(result$content5$prob * 100), '\"'))\n    \n    # Delete temp file.\n    file.remove(fileName)\n    \n    content <- formatResult(result)\n  }\n  else if (grepl('clyp.it', tolower(url))) {\n    # Format url for api.\n    url <- gsub('www.clyp.it', 'api.clyp.it', url)\n    url <- gsub('/clyp.it', '/api.clyp.it', url)\n\n    # Download json.\n    json <- getURL(url)\n    if (grepl('mp3url', tolower(json))) {\n      data <- fromJSON(json)\n      mp3 <- data$Mp3Url\n      \n      # Create a unique filename.\n      mp3FilePath <- paste0('./temp', id, '/temp', id, '.mp3')\n      wavFilePath <- gsub('.mp3', '.wav', mp3FilePath)\n      \n      currentPath <- getwd()\n      fileName <- basename(mp3FilePath)\n      path <- dirname(mp3FilePath)\n      \n      # Create directory.\n      dir.create(path)\n      \n      incProgress(0.1, message = 'Downloading clip ..')\n      \n      logEntry('Downloading url.', paste0('\"id\": \"', id, '\", \"url\": \"', origUrl, '\", \"downloadUrl\": \"', mp3, '\", \"mp3FilePath\": \"', mp3FilePath, '\", \"wavFilePath\": \"', wavFilePath, '\", \"fileName\": \"', fileName, '\", \"path\": \"', path, '\"'))\n      \n      # Download mp3 file.\n      download.file(mp3, mp3FilePath)\n      \n      print(path)\n      print(mp3FilePath)\n      print(wavFilePath)\n      print(fileName)\n      \n      # Set directory to read file.\n      setwd(path)\n  \n      incProgress(0.2, message = 'Convirtiendo mp3 a wav ..')\n      \n      logEntry('Converting mp3 to wav.', paste0('\"id\": \"', id, '\", \"url\": \"', origUrl, '\", \"downloadUrl\": \"', mp3, '\", \"mp3FilePath\": \"', mp3FilePath, '\", \"wavFilePath\": \"', wavFilePath, '\", \"fileName\": \"', fileName, '\", \"path\": \"', path, '\"'))\n      \n      # Convert mp3 to wav (does not always work due to bug with tuneR).\n      tryCatch({\n        # Use mcparallel to fork the process and hopefully recover from any R session crash.\n        if(.Platform$OS.type == 'unix') {\n          p <- mcparallel(try(mp32wav()))\n          # wait for job to finish and collect all results.\n          res <- mccollect(p)\n        }\n        else {\n          try(mp32wav())\n        }\n      })\n    \n      # Restore path.\n      setwd(currentPath)\n      \n      if (file.exists(wavFilePath)) {\n        # Process.\n        result <- process(wavFilePath)\n        graph1 <- result$graph1\n        graph2 <- result$graph2\n        \n        logEntry('Classification done.', paste0('\"id\": \"', id, '\", \"url\": \"', origUrl, '\", \"filePath\": \"', wavFilePath, '\", \"class\": \"', result$content5$label, '\", \"prob\": \"', round(result$content5$prob * 100), '\"'))\n        \n        content <- formatResult(result)\n      }\n      else {\n        content <- paste0('<div class=\"shiny-output-error-validation\">Error convirtiendo mp3 a wav.<br>Intenta convertirlo manualmente con <a href=\"http://media.io\" target=\"_blank\">media.io</a>.<br>Puedes descargar el mp3: <a href=\"', mp3, '\">aqu√≠.</a>.</div>')\n        graph1 <- NULL\n        graph2 <- NULL\n        \n        logEntry('Classification error. Error converting mp3 to wav.', paste0('\"id\": \"', id, '\", \"url\": \"', origUrl, '\"'))\n      }\n      \n      # Delete temp file.\n      unlink(path, recursive=T)\n    }\n    else {\n      # 404 Not Found. Maybe a private clyp.it url?\n      content <- paste0('<div class=\"shiny-output-error-validation\">Error accessing clyp.it URL (404). Check if the audio clip is set to Private in your clyp.it account.</div>')\n      graph1 <- NULL\n      graph2 <- NULL\n      \n      logEntry('Classification error. Error accessing clyp.it url', paste0('\"id\": \"', id, '\", \"url\": \"', origUrl, '\", \"apiUrl\": \"', url, '\"'))\n    }\n  }\n\n  list(content=content, graph1=graph1, graph2=graph2)\n}\n\nprocess <- function(path) {\n  content1 <- list(label = 'Sorry, an error occurred.', prob = 0, data = NULL)\n  content2 <- list(label = '', prob = 0, data = NULL)\n  content3 <- list(label = '', prob = 0, data = NULL)\n  content4 <- list(label = '', prob = 0, data = NULL)\n  content5 <- list(label = '', prob = 0, data = NULL)\n  graph1 <- NULL\n  graph2 <- NULL\n  freq <- list(minf = NULL, meanf = NULL, maxf = NULL)\n  \n  id <- gsub('.*temp(\\\\d+)\\\\.wav', '\\\\1', path)\n  logEntry('Classifying.', paste0('\"id\": \"', id, '\", \"filePath\": \"', path, '\"'))\n  \n  tryCatch({\n    incProgress(0.3, message = 'Procesando voz ..')\n    content1 <- gender(path, 1)\n    if (content1$label == 'male')\n      content1$label = 'masculino'\n    else\n      content1$label = 'femenino'\n    incProgress(0.4, message = 'Analizando voz 1/4 ..')\n    content2 <- gender(path, 2, content1)\n    if (content2$label == 'male')\n      content2$label = 'masculino'\n    else\n      content2$label = 'femenino'\n    incProgress(0.5, message = 'Analizando voz 2/4 ..')\n    content3 <- gender(path, 3, content1)\n    if (content3$label == 'male')\n      content3$label = 'masculino'\n    else\n      content3$label = 'femenino'\n    incProgress(0.6, message = 'Analizando voz 3/4 ..')\n    content4 <- gender(path, 4, content1)\n    if (content4$label == 'male')\n      content4$label = 'masculino'\n    else\n      content4$label = 'femenino'\n    incProgress(0.7, message = 'Analizando voz 4/4 ..')\n    content5 <- gender(path, 5, content1)\n    if (content5$label == 'male')\n      content5$label = 'masculino'\n    else\n      content5$label = 'femenino'\n    incProgress(0.8, message = 'Creando gr√°fico 2/2 ..')\n    \n    wl <- 2048\n    ylim <- 280\n    thresh <- 5\n    \n    # Calculate fundamental frequencies.\n    freqs <- fund(content1$wave, fmax=ylim, ylim=c(0, ylim/1000), threshold=thresh, plot=F, wl=wl)\n    freq$minf <- round(min(freqs[,2], na.rm = T)*1000, 0)\n    freq$meanf <- round(mean(freqs[,2], na.rm = T)*1000, 0)\n    freq$maxf <- round(max(freqs[,2], na.rm = T)*1000, 0)\n    \n    graph1 <- renderPlot({\n      #content1$wave <- ffilter(content1$wave, from=0, to=400, output='Wave')\n      #content1$wave <- fir(content1$wave, from=80, to=280, output='Wave')\n      \n      # spectro(content1$wave, ovlp=40, zp=8, scale=FALSE, flim=c(0,0.5))\n      # par(new=TRUE)\n      # \n      # freqs <- dfreq(content1$wave, at = seq(0.0, duration(content1$wave), by = 0.5), type = \"o\", xlim = c(0.0, duration(content1$wave)), ylim=c(0, 0.5), main = \"a measure every 10 ms\", plot=F)\n      # dfreq(content1$wave, at = seq(0.0, duration(content1$wave), by = 0.5), type = \"o\", xlim = c(0.0, duration(content1$wave)), ylim=c(0, 0.5), main = \"a measure every 10 ms\")\n      # \n      # x <- freqs[,1]\n      # y <- freqs[,2] + 0.01\n      # labels <- freqs[,2]\n      # \n      # subx <- x[seq(1, length(x), 3)]\n      # suby <- y[seq(1, length(y), 3)]\n      # sublabels <- paste(labels[seq(1, length(labels), 3)] * 1000, 'hz')\n      # text(subx, suby, labels = sublabels)\n      # \n      # minf <- round(min(freqs[,2], na.rm = T)*1000, 0)\n      # meanf <- round(mean(freqs[,2], na.rm = T)*1000, 0)\n      # maxf <- round(max(freqs[,2], na.rm = T)*1000, 0)\n      # text(duration(content1$wave) / 2, 0.47, labels = paste('Minimum Frequency = ', minf, 'hz'))\n      # text(duration(content1$wave) / 2, 0.46, labels = paste('Avgerage Frequency = ', meanf, 'hz'))\n      # text(duration(content1$wave) / 2, 0.45, labels = paste('Maximum Frequency = ', maxf, 'hz'))\n      \n      fund(content1$wave, fmax=ylim, ylim=c(0, ylim/1000), type='l', threshold=thresh, col='red', wl=wl)\n      x <- freqs[,1]\n      y <- freqs[,2] + 0.01\n      labels <- freqs[,2]\n      \n      subx <- x[seq(1, length(x), 4)]\n      suby <- y[seq(1, length(y), 4)]\n      sublabels <- paste(round(labels[seq(1, length(labels), 4)] * 1000, 0), 'hz')\n      text(subx, suby, labels = sublabels)\n      \n      legend(0.5, 0.05, legend=c(paste('Min frequency', freq$minf, 'hz'), paste('Average frequency', freq$meanf, 'hz'), paste('Max frequency', freq$maxf, 'hz')), text.col=c('black', 'darkgreen', 'black'), pch=c(19, 19, 19))\n\n      #dfreq(content1$wave, at=seq(0, duration(content1$wave) - 0.1, by=0.1), threshold=5, type=\"l\", col=\"red\", lwd=2, xlab='', xaxt='n', yaxt='n')\n#      par(new=TRUE)\n      #fund(wav, threshold=6, fmax=8000, type=\"l\", col=\"green\", lwd=2, xlab='', xaxt='n', yaxt='n')\n      #par(new=TRUE)\n#      res <- autoc(content1$wave, threshold=5, fmin=50, fmax=300, plot=T, type='p', col='black', xlab='', ylab='', xaxt='n', yaxt='n')\n      #legend(0, 8, legend=c('Fundamental frequency', 'Fundamental frequency', 'Dominant frequency'), col=c('green', 'black', 'red'), pch=c(19, 1, 19))\n#      legend(0, 8, legend=c('Fundamental frequency', 'Dominant frequency'), col=c('black', 'red'), pch=c(1, 19))\n    })\n    \n    incProgress(0.9, message = 'Creando grafico 2/2 ..')\n    graph2 <- renderPlot({\n      spectro(content1$wave, ovlp=40, zp=8, scale=FALSE, flim=c(0,ylim/1000), wl=wl)\n      #par(new=TRUE)\n      #dfreq(content1$wave, threshold=thresh, wl=wl, ylim=c(0, ylim/1000), type=\"l\", col=\"red\", lwd=2, xlab='', xaxt='n', yaxt='n')\n    })\n  }, warning = function(e) {\n    if (grepl('cannot open the connection', e) || grepl('cannot open compressed file', e)) {\n      restart(e)\n    }\n  }, error = function(e) {\n    if (grepl('cannot open the connection', e) || grepl('cannot open compressed file', e)) {\n      restart(e)\n    }\n  })\n  \n  list(content1=content1, content2=content2, content3=content3, content4=content4, content5=content5, graph1=graph1, graph2=graph2, freq=freq)\n}\n\ncolorize <- function(tag) {\n  result <- tag\n  \n  if (tag == 'femenino') {\n    result <- paste0(\"<span style='color: #ff00ff;'>\", tag, \"</span>\")\n  }\n  else if (tag == 'masculino') {\n    result <- paste0(\"<span style='color: #0066ff;'>\", tag, \"</span>\")\n  }\n  else if (grepl('error', tag)) {\n    result <- paste0(\"<span style='color: #ff0000;'>\", tag, \"</span>\")\n  }\n  \n  result\n}\n\nformatResult <- function(result) {\n  pitchColor <- '#aa00aa;'\n  if (result$content2$label == 'male') {\n    pitchColor <- '#0000ff'\n  }\n  html <- paste0('Resultado: <span style=\"font-weight: bold;\">', colorize(result$content5$label), '</span> <span class=\"average-pitch\"><i class=\"fa fa-headphones\" aria-hidden=\"true\" title=\"Average Pitch\" style=\"color: ', pitchColor, '\"></i>', result$freq$meanf, ' hz</span><hr>')\n\n  html <- paste0(html, '<div class=\"detail-summary\">')\n  html <- paste0(html, '<div class=\"detail-header\">Details</div>')\n  html <- paste0(html, 'Modelo 1: ', colorize(result$content1$label), '<i class=\"fa fa-info\" aria-hidden=\"true\" title=\"Support Vector Machine (SVM), Threshold value: ', round(result$content1$prob * 100), '%\"></i>,  ')\n  html <- paste0(html, 'Modelo 2: ', colorize(result$content2$label), '<i class=\"fa fa-info\" aria-hidden=\"true\" title=\"XGBoost Small, Threshold value: ', round(result$content2$prob * 100), '%\"></i>,  ')\n  html <- paste0(html, 'Modelo 3: ', colorize(result$content3$label), '<i class=\"fa fa-info\" aria-hidden=\"true\" title=\"Tuned Random Forest, Threshold value: ', round(result$content3$prob * 100), '%\"></i>,  ')\n  html <- paste0(html, 'Modelo 4: ', colorize(result$content4$label), '<i class=\"fa fa-info\" aria-hidden=\"true\" title=\"XGBoost Large, Threshold value: ', round(result$content4$prob * 100), '%\"></i>,  ')\n  html <- paste0(html, 'Modelo 5: ', colorize(result$content5$label), '<i class=\"fa fa-info\" aria-hidden=\"true\" title=\"Stacked, Threshold value: ', round(result$content5$prob * 100), '%\"></i>')\n  html <- paste0(html, '</div>')\n  \n  html\n}\n\nlogEntry <- function(message, extra = NULL) {\n  try(\n    if (!is.null(message) && nchar(message) > 0) {\n      body <- paste0('{\"application\": \"Voice Gender\", \"message\": \"', message, '\"')\n      \n      if (!is.null(extra)) {\n        body <- paste0(body, ', ', extra)\n      }\n    \n      body <- paste0(body, '}')\n    \n      getURL(paste0('http://logs-01.loggly.com/inputs/', token), postfields=body)\n    }\n  )\n}\n\nrestart <- function(e) {\n  system('touch ~/app-root/repo/R/restart.txt')\n}",
    "created" : 1503015272555.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "1|68|3|0|\n16|29|42|0|\n48|46|119|0|\n121|40|150|0|\n158|39|185|2|\n186|44|272|2|\n333|26|378|4|\n381|26|385|4|\n387|92|389|4|\n390|26|394|2|\n434|45|448|0|\n",
    "hash" : "4001240206",
    "id" : "1A20007A",
    "lastKnownWriteTime" : 1503182234,
    "last_content_update" : 1503182873389,
    "path" : "~/Documents/voice-gender-master/Web/server.R",
    "project_path" : "Web/server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}